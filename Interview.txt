/*For String to Int
* We want to take advantage of the ASCII table.
* The decimal value for '0' is 48 and '9' is 57
*/

Public int StringToInt(String str){

initialize sum to zero;
for (int i=0; i<str.length(); i++){
//if the decimal number at position of character [i] in string is greater than or equal to 48 AND less than or equal to 59
  if(((int)str.charAt(i)>=48)&&((int)str.charAt(i)<=59){
  //sum = the sum * the base + the decimal value of char[i] - the decimal value of '0' (48)
    sum = sum * 10 + ((int)str.charAt(i) - 48);
  }
  return sum;
}  
}

/* Find the missing number in array
*This took a bit of research for the most efficient way
*Here we must take advantage of a math equation (Arithmetic Sum Series)
*/

//first we must calculate the sum of all numbers that are stored in the array
  int sum;
  int missingNum;
  for(int i=0; i<arr.length; i++){
    sum = arr[i]+arr[i+1];
    }
 //subtract the sum from n(n+1)/2 where n is the number of elements expected in array 
   int missingNum = ((arr.length + 1) * arr.length / 2) - sum;
  
  //print missingNum

  /*Dependancy Injection:
  * I researched and watched videos about the usefulness of this concept on an enterprise level
  * It does exactly as the name suggests: injects dependancies.
  * It does so in two ways: using the constuctor method AND Using the setter Method.
  * this is vital because it decouples your class construction from the construction of its DEPENDANCIES
  * often referred to as having the assistant do the heavy lifting
  * It is a principle that states code should only depend upon abstractions
  */
    

