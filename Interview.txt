/*
* Counting cards in javascript
*/


var count = 0;

function cc(card) {
  // Only change code below this line
  switch(card){
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      count = count + 1;
      break;
    case 7:
    case 8:
    case 9:
      count = count;
      break;
    case 10:
    case 'J':
    case 'Q':
    case 'K':
    case 'A':
      count = count-1;
      break;
  }
  if (count>0){
    return count + " Bet";
  }
  else
  
  return count + " Hold";
  // Only change code above this line
}

// Add/remove calls to test your function.
// Note: Only the last will display
cc(2); cc(3); cc(7); cc('K'); cc('A');/*For String to Int
* We want to take advantage of the ASCII table.
* The decimal value for '0' is 48 and '9' is 57
*/

Public int StringToInt(String str){

initialize sum to zero;
for (int i=0; i<str.length(); i++){
//if the decimal number at position of character [i] in string is greater than or equal to 48 AND less than or equal to 59
  if(((int)str.charAt(i)>=48)&&((int)str.charAt(i)<=59){
  //sum = the sum * the base + the decimal value of char[i] - the decimal value of '0' (48)
    sum = sum * 10 + ((int)str.charAt(i) - 48);
  }
  return sum;
}  
}
--------------------------------------------------------------------------------------------------
/* Find the missing number in array
*This took a bit of research for the most efficient way
*Here we must take advantage of a math equation (Arithmetic Sum Series)
*/

//first we must calculate the sum of all numbers that are stored in the array
  int sum;
  int missingNum;
  for(int i=0; i<arr.length; i++){
    sum = sum + arr[i];
    }
 //subtract the sum from n(n+1)/2 where n is the number of elements expected in array 
   int missingNum = ( ( (arr.length+1) * (arr.length + 2) )/ 2) - sum;
  
  //print missingNum
  
  
---------------------------------------------------------------------------------------------------


  /*Dependancy Injection:
  * I researched and watched videos about the usefulness of this concept on an enterprise level
  * It does exactly as the name suggests: injects dependancies.
  * It does so in two ways: using the constuctor method AND Using the setter Method.
  * this is vital because it decouples your class construction from the construction of its DEPENDANCIES
  * often referred to as having the assistant do the heavy lifting
  * It is a principle that states code should only depend upon abstractions
  */
    
----------------------------------------------------------------------------------------------------

/* How is hashig actually done?
* Although I could anser what a hashmap does/is, I could not answer how it was done, fully.
* Hashing has 3 parts to it: hash function, Hash value, and Hash bucket
* Hash function is hashCode that returns the integer value
* Hash value is the the value in which is returned by the hash function
* Hash bucket is used to store the key value pairs and is constructed by linked list
* Something I left out while for this when discussing, is that the hashmap is highly efficient for large sets of data.
* It provides us with a constant time of O(1) when retrieving values since it is not an iterative object.
*/


